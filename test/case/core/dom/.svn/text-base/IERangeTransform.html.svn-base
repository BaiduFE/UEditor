<!doctype html>
<html>
<head>
    <title>domUtils.Element</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <!--qunit js -->
    <script src="../../../qunit/qunit.js" type="text/javascript"></script>
    <link media="screen" href="../../../qunit/qunit.css" type="text/css" rel="stylesheet"/>
    <!--qunit js -->
</head>

<body>
<h1 id="qunit-header">domUtils.Element Test</h1>

<h2 id="qunit-banner"></h2>

<div id="qunit-testrunner-toolbar"></div>
<h2 id="qunit-userAgent"></h2>
<ol id="qunit-tests"></ol>
<div id="test">
</div>
<div id="editor" contenteditable="true" style="border:1px solid #ccc;width:300px;height:300px"onmouseup="customerRange()"></div>
<div id="showRange"></div>

<script src="../../../../src/editor.js" type="text/javascript"></script>
<script src="../../../../src/core/utils.js" type="text/javascript"></script>
<script src="../../../../src/core/browser.js" type="text/javascript"></script>
<script src="../../../../src/core/dom/dom.js" type="text/javascript"></script>
<script src="../../../../src/core/dom/dtd.js" type="text/javascript"></script>
<script src="../../../../src/core/dom/domUtils.js" type="text/javascript"></script>


</body>
</html>
<script>
    var domUtils = baidu.editor.dom.domUtils,
        dtd = baidu.editor.dom.dtd;
    function customerRange(){
        var range = document.selection.createRange();
        showRange.innerHTML = range.html;

       getBoundaryInformation(range,true);
       getBoundaryInformation(range,false);
    }
    var getBoundaryInformation = function( range, start ) {

        var getIndex = domUtils.getNodeIndex;

        range = range.duplicate();
        range.collapse( start );


        var parent = range.parentElement();

        //如果节点里没有子节点，直接退出
        if ( !parent.hasChildNodes() ) {
            return  {container:parent,offset:0};
        }

        var siblings = parent.children,
                child,
                testRange = range.duplicate(),
                startIndex = 0,endIndex = siblings.length - 1,index = -1,
                distance;

        while ( startIndex <= endIndex ) {
            index = Math.floor( (startIndex + endIndex) / 2 );
            child = siblings[index];
            testRange.moveToElementText( child );
            var position = testRange.compareEndPoints( 'StartToStart', range );


            if ( position > 0 ) {

                endIndex = index - 1;
            } else if ( position < 0 ) {

                startIndex = index + 1;
            } else {

                return  dtd.$empty[child.tagName.toLowerCase()] ?
                {container:parent,offset:getIndex( child )} :
                {container:child,offset:0}

            }
        }

        if ( index == -1 ) {
            testRange.moveToElementText( parent );
            testRange.setEndPoint( 'StartToStart', range );
            distance = testRange.text.replace( /(\r\n|\r)/g, '\n' ).length;
            siblings = parent.childNodes;
            if ( !distance ) {
                child = siblings[siblings.length - 1];
                return  {container:child,offset:child.nodeValue.length};
            }

            var i = siblings.length;
            while ( distance > 0 )
                distance -= siblings[ --i ].nodeValue.length;

            return {container:siblings[i],offset:-distance}
        }

        testRange.collapse( position > 0 ? true : false );
        testRange.setEndPoint( position > 0 ? 'StartToStart' : 'EndToStart', range );
        distance = testRange.text.replace( /(\r\n|\r)/g, '\n' ).length;
        if ( !distance ) {
            return  dtd.$empty[child.tagName.toLowerCase()] ?

            {container : parent,offset:getIndex( child ) + (position > 0 ? 0 : 1)} :
            {container : child,offset: position > 0 ? 0 : child.childNodes.length}
        }

        while ( distance > 0 ) {
            child = child[position > 0 ? 'previousSibling' : 'nextSibling'];
            distance -= child.nodeValue.length;
        }
        return  {container:child,offset:position > 0 ? -distance : child.nodeValue.length + distance}


    };
    module( "IERangeTransform" );
    function getHTML( co ) {

        var h = co.innerHTML.toLowerCase();

        h = h.replace( /[\r\n\t]/g, '' ); // Remove line feeds and tabs
        h = h.replace( / (\w+)=([^\"][^\s>]*)/gi, ' $1="$2"' ); // Restore attribs on IE

        return h;
    }
    var div = document.getElementById( 'test' );

    test( 'getBoundaryInformation', function() {
        div.innerHTML = '<b>xxx</b>bbbb';
        var range = document.selection.createRange();
        range.moveToElementText( div.firstChild );
        same( {
            container : div.firstChild.firstChild,
            offset : 0
        }, getBoundaryInformation( range, true ) );
        same( {
            container : div.firstChild.firstChild,
            offset : 3
        }, getBoundaryInformation( range, false ) );
        range.moveStart( 'character', 1 );
        range.moveEnd( 'character', -1 );

        same( {
            container : div.firstChild.firstChild,
            offset : 1
        }, getBoundaryInformation( range, true ) );
        same( {
            container : div.firstChild.firstChild,
            offset : 2
        }, getBoundaryInformation( range, false ) );

        div.innerHTML = '<b><i>xxxx</i></b>xxx'
        range.moveToElementText( div.firstChild );

        same( {
            container : div.firstChild.firstChild.firstChild,
            offset : 0
        }, getBoundaryInformation( range, true ) );
        same( {
            container : div.firstChild.firstChild.firstChild,
            offset : 4
        }, getBoundaryInformation( range, false ) );

        range.moveEnd( 'character', 1 )
        same( {
            container : div.lastChild,
            offset : 1
        }, getBoundaryInformation( range, false ) );

        range.moveEnd( 'character', 2 );
        same( {
            container : div.lastChild,
            offset : 3
        }, getBoundaryInformation( range, false ) );

        div.innerHTML = '';
        div.appendChild( document.createTextNode( '123' ) );
        div.appendChild( document.createTextNode( '456' ) );
        div.appendChild( document.createElement( 'b' ) );
        div.appendChild( document.createTextNode( '789' ) );
        range.moveToElementText( div );
        range.moveStart( 'character', 6 );

        same( {
            container : div.children[0],
            offset : 0
        }, getBoundaryInformation( range, true ) );
        same( {
            container : div.lastChild,
            offset : 3
        }, getBoundaryInformation( range, false ) );

        div.innerHTML = '<table><tr><td>xxxx</td></tr></table>'
        range.moveToElementText( div.firstChild );

        same( {
            container : div.firstChild.getElementsByTagName( 'tr' )[0],
            offset : 1
        }, getBoundaryInformation( range, false ) );

        div.innerHTML = '';
        range.moveToElementText(div);

          same( {
            container : div,
            offset : 0
        }, getBoundaryInformation( range, false ) );

         div.innerHTML = 'xxxx<img><br/>sdfsd<b></b>eeee';
         range.moveToElementText(div.getElementsByTagName('br')[0]);


        same( {
            container : div.lastChild.previousSibling.previousSibling,
            offset : 0
        }, getBoundaryInformation( range, false ) );

          same( {
            container : div,
            offset : 2
        }, getBoundaryInformation( range, true ) );

        div.innerHTML = '';
        div.appendChild(document.createTextNode('\ufeff'));
        range.moveToElementText(div);

    } )
</script>
